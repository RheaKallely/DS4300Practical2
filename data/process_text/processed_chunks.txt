--- Chunk 1 ---
ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efficiency linear search start beginning list proceed element element find youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insert

--- Chunk 2 ---
ions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value

--- Chunk 3 ---
 searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 4 ---
ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efficiency linear search start beginning list proceed element element find youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insert

--- Chunk 5 ---
 list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insertions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2

--- Chunk 6 ---
 best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes

--- Chunk 7 ---
 binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 8 ---
ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efficiency linear search start beginning list proceed element element find youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insert

--- Chunk 9 ---
 list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insertions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search

--- Chunk 10 ---
ions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value

--- Chunk 11 ---
 best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes

--- Chunk 12 ---
 searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 13 ---
 something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 14 ---
ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efficiency linear search start beginning list proceed element element find youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insertions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes

--- Chunk 15 ---
 something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 16 ---
ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efficiency linear search start beginning list proceed element element find youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insertions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes

--- Chunk 17 ---
 binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 18 ---
ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efficiency linear search start beginning list proceed element element find youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insertions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes

--- Chunk 19 ---
 searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 20 ---
ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efficiency linear search start beginning list proceed element element find youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insertions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 21 ---
ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efficiency linear search start beginning list proceed element element find youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insertions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 22 ---
ds 4300 large scale information storage retrieval foundations mark fontenot phd northeastern university searching searching common operation performed database system sql select statement arguably versatile complex baseline efficiency linear search start beginning list proceed element element find youre looking get last element havent found searching record collection values attributes single entity instance row table collection set records entity type table trivially stored sequential order like list search key value attribute entity type could 1 attribute lists records record takes x bytes memory n records need nx bytes memory contiguously allocated list nx bytes allocated single chunk memory linked list record needs x bytes additional space 1 2 memory addresses individual records linked together type chain using memory addresses contiguous vs linked 6 records contiguously allocated array front back 6 records linked memory addresses linked list extra storage memory address pros cons arrays faster random access slow inserting anywhere end linked lists faster inserting anywhere list slower random access insert 2nd record records records 5 records moved make space insert 2nd record observations arrays fast random access slow random insertions linked lists slow random access fast random insertions binary search input array values sorted order target value output location index target located value indicating target found def binary_searcharr target left right 0 lenarr 1 left right mid left right 2 arrmid target return mid elif arrmid target left mid 1 else right mid 1 return 1 c g p r z target mid since target arrmid reset right mid 1 left right c g p r z target mid left right time complexity linear search best case target found first element 1 comparison worst case target array n comparisons therefore worst case linear search time complexity binary search best case target found mid 1 comparison inside loop worst case target array log2 n comparisons therefore worst case binary search olog2n time complexity back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient back database searching assume data stored disk column ids value searching specific id fast want search specific specialval option linear scan column cant store data disk sorted id specialval time data would duplicated space inefficient need external data structure support faster searching specialval linear scan arsenal array tuples specialval rownumber sorted specialval could use binary search quickly locate particular specialval find corresponding row table every insert table would like inserting sorted array slow linked list tuples specialval rownumber sorted specialval searching specialval would slow linear scan required inserting table would theoretically quick also add list really talking database indexes something fast insert fast search binary search tree binary tree every node left subtree less parent every node right subtree greater parent image httpscoursesgraingerillinoiseducs225sp2019notesbst board

--- Chunk 23 ---
foundations largescale information storage retrieval searching common database operation sql select complex versatile statement linear search baseline efficiency starts beginning list proceeds element element ends target found last element reached database concepts record row table collection attribute values entity collection table set records entity type search key value attribute one attributes memory allocation lists contiguously allocated list nx bytes allocated single chunk fast random access slow insertions linked list requires x bytes per record plus space pointers fast insertions slow random access binary search requires sorted data algorithm find middle element mid target return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable

--- Chunk 24 ---
 wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection

--- Chunk 25 ---
 inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nos

--- Chunk 26 ---
ql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 27 ---
foundations largescale information storage retrieval searching common database operation sql select complex versatile statement linear search baseline efficiency starts beginning list proceeds element element ends target found last element reached database concepts record row table collection attribute values entity collection table set records entity type search key value attribute one attributes memory allocation lists contiguously allocated list nx bytes allocated single chunk fast random access slow insertions linked list requires x bytes per record plus space pointers fast insertions slow random access binary search requires sorted data algorithm find middle element mid target return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable

--- Chunk 28 ---
 row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmovies

--- Chunk 29 ---
 primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph

--- Chunk 30 ---
 traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nosql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 31 ---
ql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 32 ---
foundations largescale information storage retrieval searching common database operation sql select complex versatile statement linear search baseline efficiency starts beginning list proceeds element element ends target found last element reached database concepts record row table collection attribute values entity collection table set records entity type search key value attribute one attributes memory allocation lists contiguously allocated list nx bytes allocated single chunk fast random access slow insertions linked list requires x bytes per record plus space pointers fast insertions slow random access binary search requires sorted data algorithm find middle element mid target return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable

--- Chunk 33 ---
 return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports

--- Chunk 34 ---
 wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection

--- Chunk 35 ---
 primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph

--- Chunk 36 ---
 inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nos

--- Chunk 37 ---
 path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nosql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 38 ---
ql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 39 ---
foundations largescale information storage retrieval searching common database operation sql select complex versatile statement linear search baseline efficiency starts beginning list proceeds element element ends target found last element reached database concepts record row table collection attribute values entity collection table set records entity type search key value attribute one attributes memory allocation lists contiguously allocated list nx bytes allocated single chunk fast random access slow insertions linked list requires x bytes per record plus space pointers fast insertions slow random access binary search requires sorted data algorithm find middle element mid target return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph

--- Chunk 40 ---
 path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nosql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 41 ---
foundations largescale information storage retrieval searching common database operation sql select complex versatile statement linear search baseline efficiency starts beginning list proceeds element element ends target found last element reached database concepts record row table collection attribute values entity collection table set records entity type search key value attribute one attributes memory allocation lists contiguously allocated list nx bytes allocated single chunk fast random access slow insertions linked list requires x bytes per record plus space pointers fast insertions slow random access binary search requires sorted data algorithm find middle element mid target return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph

--- Chunk 42 ---
 traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nosql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 43 ---
foundations largescale information storage retrieval searching common database operation sql select complex versatile statement linear search baseline efficiency starts beginning list proceeds element element ends target found last element reached database concepts record row table collection attribute values entity collection table set records entity type search key value attribute one attributes memory allocation lists contiguously allocated list nx bytes allocated single chunk fast random access slow insertions linked list requires x bytes per record plus space pointers fast insertions slow random access binary search requires sorted data algorithm find middle element mid target return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph

--- Chunk 44 ---
 inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nosql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 45 ---
foundations largescale information storage retrieval searching common database operation sql select complex versatile statement linear search baseline efficiency starts beginning list proceeds element element ends target found last element reached database concepts record row table collection attribute values entity collection table set records entity type search key value attribute one attributes memory allocation lists contiguously allocated list nx bytes allocated single chunk fast random access slow insertions linked list requires x bytes per record plus space pointers fast insertions slow random access binary search requires sorted data algorithm find middle element mid target return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nosql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 46 ---
foundations largescale information storage retrieval searching common database operation sql select complex versatile statement linear search baseline efficiency starts beginning list proceeds element element ends target found last element reached database concepts record row table collection attribute values entity collection table set records entity type search key value attribute one attributes memory allocation lists contiguously allocated list nx bytes allocated single chunk fast random access slow insertions linked list requires x bytes per record plus space pointers fast insertions slow random access binary search requires sorted data algorithm find middle element mid target return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nosql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 47 ---
foundations largescale information storage retrieval searching common database operation sql select complex versatile statement linear search baseline efficiency starts beginning list proceeds element element ends target found last element reached database concepts record row table collection attribute values entity collection table set records entity type search key value attribute one attributes memory allocation lists contiguously allocated list nx bytes allocated single chunk fast random access slow insertions linked list requires x bytes per record plus space pointers fast insertions slow random access binary search requires sorted data algorithm find middle element mid target return index mid target search right half else search left half time complexity linear search worst case binary search olog n worst case database searching indexing searching primary key eg id fast searching nonindexed attribute eg specialval requires linear scan indexing strategies sorted array tuples specialval row number fast search slow insertions linked list tuples specialval row number slow search fast insertions binary search tree bst balances fast insertions searches document databases mongodb document database nosql database stores data structured documents uses json javascript object notation format advantages simple flexible scalable wellsuited applications using jsonxml transport layer json vs bson json humanreadable lightweight uses namevalue pairs ordered lists bson binary json binaryencoded json supports additional data types date binarydata designed efficiency traversal storage optimization use document databases avoids impedance mismatch objectoriented programming relational databases documents selfdescribing making flexible dynamic data storage mongodb overview developed 2007 former doubleclick engineers mongodb atlas 2016 fully managed cloud service structure database collections documents documents collection dont require fixed schema mongodb features rich query support full crud operations indexing supports primary secondary indices replication automatic failover via replica sets load balancing builtin interacting mongodb cli tools mongosh mongodb shell mongodb compass gui query examples dbusersfindname davos seaworth filters documents name dbmoviesfind rated pg pg13 retrieves movies specific ratings dbmoviesfind countries mexico imdbrating gte 7 finds movies released mexico imdb 7 mongodb python pymongo connecting mongodb pymongo import mongoclient client mongoclientmongodbuser_namepwlocalhost27017 selecting collection db clientds4300 collection dbmycollection inserting document post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id counting documents count collectioncount_documents introduction graph data models graph database graphbased data model using nodes entities edges relationships nodes properties metadata nodes edges enables graphbased queries traversals shortest paths etc graphs used social networks modeling relationships web pages connected via hyperlinks biology chemistry interaction modeling graph theory basics labeled property graph nodes labels grouping nodesedges properties keyvalue pairs edges must always connect nodes graph terminology path sequence connected nodes repetition connected graph path exists two nodes weighted graph edges weights directed graph relationships direction acyclic graph cycles graph algorithms pathfinding shortest path nodes eg dijkstras algorithm minimum spanning tree cycle detection maxmin flow centrality community detection centrality identifies influential nodes eg social media influencers community detection clustering partitioning nodes famous graph algorithms 1 dijkstras algorithm singlesource shortest path weighted graphs 2 algorithm like dijkstras uses heuristics efficiency 3 pagerank ranks nodes based incoming links neo4j graph database system schemaoptional nosql database supports acid transactions distributed computing competes amazon neptune microsoft cosmosdb

--- Chunk 48 ---
ds 4300 moving beyond relational model mark fontenot phd northeastern university benefits relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efficiency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcom

--- Chunk 49 ---
relationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction

--- Chunk 50 ---
 insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single

--- Chunk 51 ---
 main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition

--- Chunk 52 ---
 tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 53 ---
ds 4300 moving beyond relational model mark fontenot phd northeastern university benefits relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efficiency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcom

--- Chunk 54 ---
 meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account

--- Chunk 55 ---
 create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full

--- Chunk 56 ---
 deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network

--- Chunk 57 ---
 main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition

--- Chunk 58 ---
 event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 59 ---
ds 4300 moving beyond relational model mark fontenot phd northeastern university benefits relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efficiency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcom

--- Chunk 60 ---
 work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter

--- Chunk 61 ---
relationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction

--- Chunk 62 ---
 create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full

--- Chunk 63 ---
 insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single

--- Chunk 64 ---
 strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains

--- Chunk 65 ---
 main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition

--- Chunk 66 ---
 recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 67 ---
 tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 68 ---
ds 4300 moving beyond relational model mark fontenot phd northeastern university benefits relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efficiency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full

--- Chunk 69 ---
 strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 70 ---
ds 4300 moving beyond relational model mark fontenot phd northeastern university benefits relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efficiency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full

--- Chunk 71 ---
 deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 72 ---
ds 4300 moving beyond relational model mark fontenot phd northeastern university benefits relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efficiency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full

--- Chunk 73 ---
 insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 74 ---
 tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 75 ---
ds 4300 moving beyond relational model mark fontenot phd northeastern university benefits relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efficiency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 76 ---
ds 4300 moving beyond relational model mark fontenot phd northeastern university benefits relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efficiency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 77 ---
ds 4300 moving beyond relational model mark fontenot phd northeastern university benefits relational model mostly standard data model query language acid compliance second atomicity consistency isolation durability works well highly structured data handle large amounts data well understood lots tooling lots experience relational database performance many ways rdbms increases efficiency indexing topic focused directly controlling storage column oriented storage vs row oriented storage query optimization cachingprefetching materialized views precompiled stored procedures data replication partitioning transaction processing transaction sequence one crud operations performed single logical unit work either entire sequence succeeds commit entire sequence fails rollback abort help ensure data integrity error recovery concurrency control reliable data storage simplified error handling acid properties atomicity transaction treated atomic unit fully executed parts executed consistency transaction takes database one consistent state another consistent state consistent state data meets integrity constraints acid properties isolation two transactions t1 t2 executed time affect t1 t2 reading data problem t1 reading data t2 may writing result dirty read nonrepeatable read phantom reads isolation dirty read figure httpswwwmybluelinuxcomrelationaldatabasesexplained dirty read transaction t1 able read row modified another transaction t2 hasnt yet executed commit isolation nonrepeatable read figure httpswwwmybluelinuxcomrelationaldatabasesexplained nonrepeatable read two queries single transaction t1 execute select get different values another transaction t2 changed data committed isolation phantom reads figure httpswwwmybluelinuxcomrelationaldatabasesexplained phantom reads transaction t1 running another transaction t2 adds deletes rows set t1 using example transaction transfer delimiter create procedure transfer sender_id int receiver_id int amount decimal102 begin declare rollback_message varchar255 default transaction rolled back insufficient funds declare commit_message varchar255 default transaction committed successfully start transaction start transaction attempt debit money account 1 update accounts set balance balance amount account_id sender_id attempt credit money account 2 update accounts set balance balance amount account_id receiver_id continued next slide example transaction transfer continued previous slide check sufficient funds account 1 simulate condition insufficient funds select balance accounts account_id sender_id 0 roll back transaction insufficient funds rollback signal sqlstate 45000 45000 unhandled userdefined error set message_text rollback_message else log transactions sufficient funds insert transactions account_id amount transaction_type values sender_id amount withdrawal insert transactions account_id amount transaction_type values receiver_id amount deposit commit transaction commit select commit_message result end end delimiter acid properties durability transaction completed committed successfully changes permanent even event system failure committed transactions preserved info transactions see kleppmann book chapter 7 relational databases may solution problems sometimes schemas evolve time apps may need full strength acid compliance joins expensive lot data semistructured unstructured json xml etc horizontal scaling presents challenges apps need something performant real time low latency systems scalability conventional wisdom scale vertically bigger powerful systems demands highavailability make necessary scale type distributed computing model scaling easier need really modify architecture practical financial limits however modern systems make horizontal scaling less problematic distributed data scaling distributed system collection independent computers appear users one computer andrew tennenbaum characteristics distributed systems computers operate concurrently computers fail independently shared global clock distributed storage 2 directions single main node distributed data stores data stored 1 node typically replicated ie block data available n nodes distributed databases relational nonrelational mysql postgresql support replication sharding cockroachdb new player scene many nosql systems support one models remember network partitioning inevitable network failures system failures overall system needs partition tolerant system keep running even w network partition cap theorem cap theorem cap theorem states impossible distributed data store simultaneously provide two following three guarantees consistency every read receives recent write error thrown availability every request receives nonerror response guarantee response contains recent write partition tolerance system continue operate despite arbitrary network issues cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency every user db identical view data given instant availability event failure database remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem database view reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network issues consistency partition tolerance system responds data distributed store always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data cap reality really saying limit number faults requests directed server insist serving every request possibly consistent interpreted must always give something consistency availability tolerance failure

--- Chunk 78 ---
ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data benefits scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go

--- Chunk 79 ---
 leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 

--- Chunk 80 ---
1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 81 ---
ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data benefits scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go

--- Chunk 82 ---
 disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes

--- Chunk 83 ---
 challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read

--- Chunk 84 ---
 monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 85 ---
ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data benefits scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go

--- Chunk 86 ---
 architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails

--- Chunk 87 ---
 leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 

--- Chunk 88 ---
 challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read

--- Chunk 89 ---
1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 90 ---
 guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 91 ---
ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data benefits scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read

--- Chunk 92 ---
 guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 93 ---
ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data benefits scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read

--- Chunk 94 ---
 monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 95 ---
ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data benefits scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read

--- Chunk 96 ---
1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 97 ---
ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data benefits scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 98 ---
ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data benefits scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 99 ---
ds 4300 replicating data mark fontenot phd northeastern university material used permission dr rachlin thanks distributing data benefits scalability high throughput data volume readwrite load grows beyond capacity single machine fault tolerance high availability application needs continue working even one machines goes latency users different parts world want give fast performance distributed data challenges consistency updates must propagated across network application complexity responsibility reading writing data distributed environment often falls application vertical scaling shared memory architectures geographically centralized server fault tolerance via hotswappable components vertical scaling shared disk architectures machines connected via fast network contention overhead locking limit scalability highwrite volumes ok data warehouse applications high read volumes aws ec2 pricing oct 2024 78000month httpsawsamazoncomec2pricingondemand horizontal scaling shared nothing architectures node cpu memory disk coordination via application layer using conventional network geographically distributed commodity hardware data replication vs partitioning replicates data main partitions subset data replication common strategies replication single leader model multiple leader model leaderless model distributed databases usually adopt one strategies leaderbased replication writes clients go leader leader sends replication info followers followers process instructions leader clients read either leader followers leaderbased replication write could sent one followers leader leaderbased replication common strategy relational mysql oracle sql server postgresql nosql mongodb rethinkdb realtime web apps espresso linkedin messaging brokers kafka rabbitmq replication info transmitted followers synchronous vs asynchronous replication synchronous leader waits response follower asynchronous leader doesnt wait confirmation synchronous asynchronous happens leader fails challenges pick new leader node consensus strategy perhaps based updates use controller node appoint new leader configure clients start writing new leader happens leader fails challenges asynchronous replication used new leader may writes recover lost writes simply discard old leader recovers avoid multiple leaders receiving conflicting data split brain way resolve conflicting requests leader failure detection optimal timeout tricky replication lag refers time takes writes leader reflected followers synchronous replication replication lag causes writes slower system brittle num followers increases asynchronous replication maintain availability cost delayed eventual consistency delay called inconsistency window replication lag readafterwrite consistency scenario youre adding comment reddit post click submit back main post comment show less important users see comment immediately implementing readafterwrite consistency method 1 modifiable data clients perspective always read leader implementing readafterwrite consistency method 2 dynamically switch reading leader recently updated data example policy requests within one minute last update come leader create challenges created followers would proximal users route requests distant leaders reading modifiable data monotonic read consistency monotonic read anomalies occur user reads values order multiple followers monotonic read consistency ensures user makes multiple reads read older data previously reading newer data consistent prefix reads reading data order occur different partitions replicate data different rates global write consistency consistent prefix read guarantee ensures sequence writes happens certain order anyone reading writes see appear order b far future see ms b 10 seconds usually mr

--- Chunk 100 ---
ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conflicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conflicts unlikely occur even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational

--- Chunk 101 ---
 dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent

--- Chunk 102 ---
 acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz

--- Chunk 103 ---
 product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 

--- Chunk 104 ---
16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl

--- Chunk 105 ---
 active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs l

--- Chunk 106 ---
pop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs320

--- Chunk 107 ---
0 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 108 ---
ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conflicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conflicts unlikely occur even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational

--- Chunk 109 ---
 higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems

--- Chunk 110 ---
captheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores

--- Chunk 111 ---
 crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time

--- Chunk 112 ---
 product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 

--- Chunk 113 ---
 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx

--- Chunk 114 ---
 different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later

--- Chunk 115 ---
 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs lpop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush my

--- Chunk 116 ---
pop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs320

--- Chunk 117 ---
 ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs3200 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 118 ---
ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conflicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conflicts unlikely occur even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational

--- Chunk 119 ---
 even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstanding

--- Chunk 120 ---
 dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent

--- Chunk 121 ---
captheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores

--- Chunk 122 ---
 acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz

--- Chunk 123 ---
 designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle

--- Chunk 124 ---
 product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 

--- Chunk 125 ---
 complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select

--- Chunk 126 ---
16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl

--- Chunk 127 ---
 different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later

--- Chunk 128 ---
 active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs l

--- Chunk 129 ---
 time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs lpop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page

--- Chunk 130 ---
pop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs320

--- Chunk 131 ---
 screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs3200 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 132 ---
0 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 133 ---
ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conflicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conflicts unlikely occur even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores

--- Chunk 134 ---
 designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl

--- Chunk 135 ---
 active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs lpop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs3200 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 136 ---
ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conflicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conflicts unlikely occur even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores

--- Chunk 137 ---
 crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx

--- Chunk 138 ---
 different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs lpop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs320

--- Chunk 139 ---
 ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs3200 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 140 ---
ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conflicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conflicts unlikely occur even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores

--- Chunk 141 ---
 acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select

--- Chunk 142 ---
16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs lpop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page

--- Chunk 143 ---
pop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs3200 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 144 ---
ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conflicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conflicts unlikely occur even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl

--- Chunk 145 ---
 active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs lpop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs3200 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 146 ---
ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conflicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conflicts unlikely occur even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl

--- Chunk 147 ---
 key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs lpop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs3200 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 148 ---
ds 4300 nosql kv dbs mark fontenot phd northeastern university material used permission dr rachlin thanks distributed dbs acid pessimistic concurrency acid transactions focuses data safety considered pessimistic concurrency model assumes one transaction protect transactions iow assumes something go wrong conflicts prevented locking resources transaction complete read write locks write lock analogy borrowing book library one else see httpswwwfreecodecamporgnewshowdatabasesguaranteeisolation deeper dive optimistic concurrency transactions obtain locks data read write optimistic assumes conflicts unlikely occur even conflict everything still ok add last update timestamp version number columns every table read changing check end transaction see transaction caused modified optimistic concurrency low conflict systems backups analytical dbs etc read heavy systems conflicts arise handled rolling back rerunning transaction notices conflict optimistic concurrency works well allows higher concurrency high conflict systems rolling back rerunning transactions encounter conflict less efficient locking scheme pessimistic model might preferable nosql nosql first used 1998 carlo strozzi describe relational database system use sql common modern meaning sql sometimes thought nonrelational dbs idea originally developed part response processing unstructured webbased data httpswwwdataversitynetabriefhistoryofnonrelationaldatabases cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem 2 3 following consistency every user db identical view data given instant availability event failure database system remains operational partition tolerance database maintain operations event networks failing two segments distributed system note definition consistency cap different acid cap theorem review reference httpsalperenbayramoglucompostsunderstandingcaptheorem consistency availability system always responds latest data every request gets response may able deal network partitions consistency partition tolerance system responds data distrib system always latest else data request dropped availability partition tolerance system always sends responds based distributed store may absolute latest data acid alternative distrib systems base basically available guarantees availability data per cap response failureunreliable data inconsistent changing state system appears work time acid alternative distrib systems base soft state state system could change time even wo input changes could result eventual consistency data stores dont writeconsistent replicas dont mutually consistent acid alternative distrib systems base eventual consistency system eventually become consistent writes eventually stop nodesreplicas updated categories nosql dbs review first keyvalue databases key value stores key value keyvalue stores designed around simplicity data model extremely simple comparatively tables rdbms complex lends simple crud ops api creation key value stores key value keyvalue stores designed around speed usually deployed inmemory db retrieving value given key typically o1 op bc hash tables similar data structs used hood concept complex queries joins slow things key value stores key value keyvalue stores designed around scalability horizontal scaling simple add nodes typically concerned eventual consistency meaning distributed environment guarantee nodes eventually converge value kv ds use cases edaexperimentation results store store intermediate results data preprocessing eda store experiment testing ab results wo prod db feature store store frequently accessed feature lowlatency retrieval model training prediction model monitoring store key metrics performance model example realtime inferencing kv swe use cases storing session information everything current session stored via single put post retrieved single get fast user profiles preferences user info could obtained single get operation language tz product ui preferences shopping cart data cart data tied user needs available across browsers machines sessions caching layer front diskbased database redis db redis remote directory server open source inmemory database sometimes called data structure store primarily kv store used models graph spatial full text search vector time series dbenginescom ranking kv stores redis considered inmemory database system supports durability data essentially saving snapshots disk specific intervals b appendonly file journal changes used rollforward failure originally developed 2009 c fast 100000 set ops second rich collection commands handle complex data secondary indexes supports lookup key redis data types keys usually strings binary sequence values strings lists linked lists sets unique unsorted string elements sorted sets hashes string string geospatial data setting redis docker docker desktop search redis pullrun latest image see optional settings add 6379 ports expose port connect normally would expose redis port security reasons prod environment major security hole notice didnt set password connecting datagrip file new data source redis give data source name make sure port 6379 test connection redis database interaction redis provides 16 databases default numbered 0 15 name associated direct interaction redis set commands related setting getting kv pairs variations many language libraries available well foundation data type string sequence bytes text serialized objects bin arrays simplest data type maps string another string use cases caching frequently accessed htmlcssjs fragments config settings user settings info token management counting web pageapp screen views rate limiting initial basic commands set pathtoresource 0 set user1 john doe get pathtoresource exists user1 del user1 keys user select 5 select different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl

--- Chunk 149 ---
 different database basic commands set somevalue 0 incr somevalue increment 1 incrby somevalue 10 increment 10 decr somevalue decrement 1 decrby somevalue 5 decrement 5 incr parses value int increments adds value setnx key value sets value key key already exist hash type value kv entry collection fieldvalue pairs use cases used represent basic objectsstructures number fieldvalue pairs per hash 2321 practical limit available system resources eg memory session information management userevent tracking could include ttl active session tracking sessions one hash key hash commands hset bike1 model demios brand ergonom price 1971 hget bike1 model hget bike1 price hgetall bike1 hmget bike1 model price weight hincrby bike1 price 100 returned list type value kv pair linked lists string values use cases implementation stacks queues queue management message passing queues producerconsumer model logging systems easy keep chronological order build social media streamsfeeds message history chat application batch processing queueing set tasks executed sequentially later time linked lists crash course sequential data structure linked nodes instead contiguously allocated memory node points next element list except last one points nilnull o1 insert new value front insert new value end 10 front back nil list commands queue queuelike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 rpop bikesrepairs rpop bilesrepairs list commands stack stacklike ops lpush bikesrepairs bike1 lpush bikesrepairs bike2 lpop bikesrepairs lpop bilesrepairs list commands others list ops llen mylist lrange key start stop lrange mylist 0 3 lrange mylist 0 0 lrange mylist 2 1 lpush mylist one lpush mylist two lpush mylist three json type full support json standard uses jsonpath syntax parsingnavigating json document internally stored binary treestructure fast access sub elements set type unordered collection unique strings members use cases track unique items ip addresses visiting site page screen primitive relation set students ds4300 access control lists users permission structures social network friends lists andor group membership supports set operations set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam sismember ds4300 mark sismember ds4300 nick scard ds4300 set commands sadd ds4300 mark sadd ds4300 sam sadd cs3200 nick sadd cs3200 sam scard ds4300 sinter ds4300 cs3200 sdiff ds4300 cs3200 srem ds4300 mark srandmember ds4300

--- Chunk 150 ---
ds 4300 redis python mark fontenot phd northeastern university redispy redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2

--- Chunk 151 ---
 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_

--- Chunk 152 ---
5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 153 ---
ds 4300 redis python mark fontenot phd northeastern university redispy redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2

--- Chunk 154 ---
rclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands

--- Chunk 155 ---
 lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 156 ---
 ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 157 ---
ds 4300 redis python mark fontenot phd northeastern university redispy redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2

--- Chunk 158 ---
 list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements

--- Chunk 159 ---
 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_

--- Chunk 160 ---
 lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 161 ---
5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 162 ---
ds 4300 redis python mark fontenot phd northeastern university redispy redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 163 ---
ds 4300 redis python mark fontenot phd northeastern university redispy redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 164 ---
 ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 165 ---
ds 4300 redis python mark fontenot phd northeastern university redispy redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 166 ---
5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 167 ---
ds 4300 redis python mark fontenot phd northeastern university redispy redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 168 ---
ds 4300 redis python mark fontenot phd northeastern university redispy redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 169 ---
ds 4300 redis python mark fontenot phd northeastern university redispy redispy standard client python maintained redis company github repo redisredispy 4300 conda environment pip install redis connecting server docker deployment host could localhost 127001 port port mapping given created container probably default 6379 db database 015 want connect decode_responses data comes back server bytes setting true converter decodes strings import redis redis_client redisredishostlocalhost port6379 db2 decode_responsestrue redis command list full list use filter get command particular data structure youre targeting list hash set etc redispy documentation next slides meant exhaustive list commands highlights check documentation complete list string commands r represents redis client object rsetclickcountabc 0 val rgetclickcountabc rincrclickcountabc ret_val rgetclickcountabc printfclick count ret_val string commands 2 r represents redis client object redis_clientmsetkey1 val1 key2 val2 key3 val3 printredis_clientmgetkey1 key2 key3 returns list val1 val2 val3 string commands 3 set mset setex msetnx setnx get mget getex getdel incr decr incrby decrby strlen append list commands 1 create list key names values mark sam nick redis_clientrpushnames mark sam nick prints mark sam nick printredis_clientlrangenames 0 1 list commands 2 lpush lpop lset lrem rpush rpop lrange llen lpos commands include moving elements lists popping multiple lists time etc hash commands 1 redis_clienthsetusersession123 mappingfirst sam last uelle company redis age 30 prints name sam surname uelle company redis age 30 printredis_clienthgetallusersession123 hash commands 2 hset hget hgetall hkeys hdel hexists hlen hstrlen redis pipelines helps avoid multiple related calls server less network overhead r redisredisdecode_responsestrue pipe rpipeline range5 pipesetfseati fi set_5_result pipeexecute printset_5_result true true true true true pipe rpipeline chain pipeline commands together get_3_result pipegetseat0getseat3getseat4execute printget_3_result 0 3 4 redis context redis ml simplified example source httpswwwfeatureformcompostfeaturestoresexplainedthethreecommonarchitectures redis dsml source httpsmadewithmlcomcoursesmlopsfeaturestore

--- Chunk 170 ---
ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple flexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving

--- Chunk 171 ---
 specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication

--- Chunk 172 ---
 supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg

--- Chunk 173 ---
13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db

--- Chunk 174 ---
 clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 175 ---
ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple flexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving

--- Chunk 176 ---
ed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document

--- Chunk 177 ---
 serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui

--- Chunk 178 ---
 compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre

--- Chunk 179 ---
13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db

--- Chunk 180 ---
 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 181 ---
ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple flexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving

--- Chunk 182 ---
 thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases

--- Chunk 183 ---
 specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication

--- Chunk 184 ---
 serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui

--- Chunk 185 ---
 supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg

--- Chunk 186 ---
 tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins g

--- Chunk 187 ---
13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db

--- Chunk 188 ---
te 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 189 ---
 clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 190 ---
ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple flexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui

--- Chunk 191 ---
 tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 192 ---
ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple flexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui

--- Chunk 193 ---
 compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 194 ---
ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple flexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui

--- Chunk 195 ---
 supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 196 ---
 clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 197 ---
ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple flexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 198 ---
ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple flexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 199 ---
ds 4300 document databases mongodb mark fontenot phd northeastern university material used permission dr rachlin thanks document database document database nonrelational database stores data structured documents usually json designed simple flexible scalable json json javascript object notation lightweight datainterchange format easy humans read write easy machines parse generate json built two structures collection namevalue pairs various languages operationalized object record struct dictionary hash table keyed list associative array ordered list values languages operationalized array vector list sequence two universal data structures supported virtually modern programming languages thus json makes great data interchange format json syntax httpswwwjsonorgjsonenhtml binary json bson bson binary json binaryencoded serialization jsonlike document structure supports extended types part basic json eg date binarydata etc lightweight keep space overhead minimum traversable designed easily traversed vitally important document db efficient encoding decoding must efficient supported many modern programming languages xml extensible markup language precursor json data exchange format xml css web pages separated content formatting structurally similar html tag set extensible xmlrelated toolstechnologies xpath syntax retrieving specific elements xml doc xquery query language interrogating xml documents sql xml dtd document type definition language describing allowed structure xml document xslt extensible stylesheet language transformation tool transform xml formats including nonxml formats html document databases document databases address impedance mismatch problem object persistence oo systems relational dbs structure data oo programming inheritance composition types save complex object relational database basically deconstruct structure document selfdescribing wellaligned apps use jsonxml transport layer mongodb mongodb started 2007 doubleclick acquired google 3 veterans realized limitations relational databases serving 400000 ads per second mongodb short humongous database mongodb atlas released 2016 documentdb service httpswwwmongodbcomcompanyourstory mongodb structure database collection collection b collection c document 1 document 2 document 3 document 1 document 2 document 3 document 1 document 2 document 3 mongodb documents predefined schema documents needed every document collection could different dataschema relational vs mongodocument db mongodb features rich query support robust support crud ops indexing supports primary secondary indices document fields replication supports replica sets automatic failover load balancing built mongodb versions mongodb atlas fully managed mongodb service cloud dbaas mongodb enterprise subscriptionbased selfmanaged version mongodb mongodb community sourceavailable freetouse selfmanaged interacting mongodb mongosh mongodb shell cli tool interacting mongodb instance mongodb compass free opensource gui work mongodb database datagrip 3rd party tools every major language library interface mongodb pymongo python mongoose javascriptnode mongodb community edition docker create container map hostcontainer port 27017 give initial username password superuser e mongodb compass gui tool interacting mongodb instance download install load mflix sample data set compass create new database named mflix download mflix sample dataset unzip import json files users theaters movies comments new collections mflix database creating database collection mflix users create new db create new collection mongosh mongo shell find like select collectionfind ____ ____ filters projections mongosh find select users use mflix dbusersfind mongosh find select users name davos seaworth dbusersfindname davos seaworth filter mongosh find select movies rated pg pg13 dbmoviesfindrated pg pg13 mongosh find return movies released mexico imdb rating least 7 dbmoviesfind countries mexico imdbrating gte 7 mongosh find return movies movies collection released 2010 either least 5 awards genre drama dbmoviesfind year 2010 awardswins gte 5 genres drama comparison operators mongosh countdocuments many movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama mongosh project return names movies movies collection released 2010 either least 5 awards genre drama dbmoviescountdocuments year 2010 awardswins gte 5 genres drama name 1 _id 0 1 return 0 dont return pymongo pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 collection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id count documents collection select count collection demodbcollectioncount_documents

--- Chunk 200 ---
ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 201 ---
ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 202 ---
4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 203 ---
ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 204 ---
inserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 205 ---
ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 206 ---
ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 207 ---
ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 208 ---
ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 209 ---
ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 210 ---
ds 4300 mongodb pymongo mark fontenot phd northeastern university pymongo pymongo python library interfacing mongodb instances pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 getting database collection pymongo import mongoclient client mongoclient mongodbuser_namepwlocalhost27017 db clientds4300 clientds4300 collection dbmycollection dbmycollection inserting single document db clientds4300 collection dbmycollection post author mark text mongodb cool tags mongodb python post_id collectioninsert_onepostinserted_id printpost_id find movies 2000 bsonjson_util import dumps find movies released 2000 movies_2000 dbmoviesfindyear 2000 print results printdumpsmovies_2000 indent 2 jupyter time activate ds4300 conda venv python environment install pymongo pip install pymongo install jupyter lab python environment pip install jupyterlab download unzip zip file contains 2 jupyter notebooks terminal navigate folder unzipped files run jupyter lab

--- Chunk 211 ---
ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identified contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions fields like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 

--- Chunk 212 ---
2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql

--- Chunk 213 ---
 dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 214 ---
ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identified contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions fields like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 

--- Chunk 215 ---
 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest

--- Chunk 216 ---
 pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 217 ---
ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identified contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions fields like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 

--- Chunk 218 ---
 biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types

--- Chunk 219 ---
2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql

--- Chunk 220 ---
 pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 221 ---
 dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 222 ---
ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identified contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions fields like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 223 ---
ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identified contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions fields like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 224 ---
ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identified contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions fields like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 225 ---
 dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 226 ---
ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identified contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions fields like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 227 ---
ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identified contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions fields like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 228 ---
ds 4300 introduction graph data model mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 graph database data model based graph data structure composed nodes edges edges connect nodes uniquely identified contain properties eg name occupation etc supports queries based graphoriented operations traversals shortest path lots others graphs show social networks yes things like instagram also modeling social interactions fields like psychology sociology web big graph pages nodes connected hyperlinks edges chemical biological data systems biology genetics etc interaction relationships chemistry basics graphs graph theory graph labeled property graph composed set node vertex objects relationship edge objects labels used mark node part group properties attributes think kv pairs exist nodes relationships nodes associated relationships ok edges connected nodes permitted example 2 labels person car 4 relationship types drives owns lives_with married_to properties paths path ordered sequence nodes connected edges nodes edges repeated 1 2 3 6 5 4 ex 1 2 6 5 path 1 2 6 2 3 flavors graphs connected vs disconnected path two nodes graph weighted vs unweighted edge weight property important algorithms directed vs undirected relationships edges define start end node acyclic vs cyclic graph contains cycles connected vs disconnected weighted vs unweighted directed vs undirected cyclic vs acyclic sparse vs dense trees types graph algorithms pathfinding pathfinding finding shortest path two nodes one exists probably common operation shortest means fewest edges lowest weight average shortest path used monitor efficiency resiliency networks minimum spanning tree cycle detection maxmin flow types pathfinding bfs vs dfs shortest path types graph algorithms centrality community detection centrality determining nodes important network compared nodes ex social network influencers community detection evaluate clustering partitioning nodes graph tendency strengthen break apart centrality famous graph algorithms dijkstras algorithm singlesource shortest path algo positively weighted graphs algorithm similar dijkstras added feature using heuristic guide traversal pagerank measures importance node within graph based number incoming relationships importance nodes incoming relationships neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune

--- Chunk 229 ---
ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container

--- Chunk 230 ---
_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data

--- Chunk 231 ---
 creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname usrbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general

--- Chunk 232 ---
 syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 233 ---
ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container

--- Chunk 234 ---
 multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed

--- Chunk 235 ---
_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname us

--- Chunk 236 ---
 paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname usrbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director

--- Chunk 237 ---
 syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 238 ---
ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container

--- Chunk 239 ---
ivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j

--- Chunk 240 ---
_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data

--- Chunk 241 ---
_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname us

--- Chunk 242 ---
 creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname usrbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general

--- Chunk 243 ---
rbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie

--- Chunk 244 ---
 syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 245 ---
 id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 246 ---
ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname us

--- Chunk 247 ---
rbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 248 ---
ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname us

--- Chunk 249 ---
 paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname usrbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 250 ---
ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname us

--- Chunk 251 ---
 creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname usrbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 252 ---
ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname usrbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 253 ---
ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname usrbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 254 ---
ds 4300 neo4j mark fontenot phd northeastern university material referenced graph algorithms practical examples apache spark neo4j needham hodler oreilly press 2019 neo4j graph database system supports transactional analytical processing graphbased data relatively new class nosql dbs considered schema optional one imposed supports various types indexing acid compliant supports distributed computing similar microsoft cosmodb amazon neptune neo4j query language plugins cypher neo4js graph query language created 2011 goal sqlequivalent language graph databases provides visual way matching patterns relationships nodesconnect_toothernodes apoc plugin awesome procedures cypher addon library provides hundreds procedures functions graph data science plugin provides efficient implementations common graph algorithms like ones talked yesterday neo4j docker compose docker compose supports multicontainer management setup declarative using yaml dockercomposeyaml file services volumes networks etc 1 command used start stop scale number services one time provides consistent method producing identical environment well works machine interaction mostly via command line dockercomposeyaml services neo4j container_name neo4j image neo4jlatest ports 74747474 76877687 environment neo4j_authneo4jneo4j_password neo4j_apoc_export_file_enabledtrue neo4j_apoc_import_file_enabledtrue neo4j_apoc_import_file_use__neo4j__configtrue neo4j_pluginsapoc graphdatascience volumes neo4j_dbdatadata neo4j_dblogslogs neo4j_dbimportvarlibneo4jimport neo4j_dbpluginsplugins never put secrets docker compose file use env files env files env files stores collection environment variables good way keep environment variables different platforms separate envlocal envdev envprod neo4j_passwordabc123 env file docker compose commands test docker cli properly installed run docker version major docker commands docker compose docker compose docker compose docker compose start docker compose stop docker compose build docker compose build nocache localhost7474 neo4j browser httpsneo4jcomdocsbrowsermanualcurrentvisualtour localhost7474 login inserting data creating nodes create user name alice birthplace paris create user name bob birthplace london create user name carol birthplace london create user name dave birthplace london create user name eve birthplace rome adding edge variable names create user name alice birthplace paris create user name bob birthplace london match aliceuser namealice match bobuser name bob create aliceknows since 20221201bob note relationships directed neo4j matching users born london match usruser birthplace london return usrname usrbirthplace download dataset move import folder clone repo httpsgithubcompacktpublishinggraphdatasciencewithneo4j chapter02data data repo unzip netflixzip file copy netflix_titlescsv following folder put docker compose file neo4j_dbneo4j_dbimport importing data basic data importing load csv headers filenetflix_titlescsv line createmovie id lineshow_id title linetitle releaseyear linerelease_year type following cypher editor neo4j browser loading csvs general syntax load csv headers filefile_in_import_foldercsv line fieldterminator stuffs line importing directors time load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name create person name trimdirector_name generates duplicate person nodes director direct 1 movie importing directors merged match pperson delete p load csv headers filenetflix_titlescsv line splitlinedirector directors_list unwind directors_list director_name merge person name director_name adding edges load csv headers filenetflix_titlescsv line match mmovie id lineshow_id splitlinedirector directors_list unwind directors_list director_name match pperson name director_name create pdirectedm gut check lets check movie titled ray match mmovie title raydirectedpperson return p

--- Chunk 255 ---
ds 4300 aws introduction mark fontenot phd northeastern university amazon web services leading cloud platform 200 different services available globally available via massive networks regions availability zones massive data centers based payasyouuse cost model theoretically cheaper renting rackspaceservers data center theoretically history aws originally launched 2006 2 services s3 ec2 2010 services expanded include simpledb elastic block store relational database service dynamodb cloudwatch simple workflow cloudfront availability zones others amazon competitions big prizes spur adoption aws early days theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnect

--- Chunk 256 ---
ivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable

--- Chunk 257 ---
 different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon emr elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon r

--- Chunk 258 ---
ds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 259 ---
ds 4300 aws introduction mark fontenot phd northeastern university amazon web services leading cloud platform 200 different services available globally available via massive networks regions availability zones massive data centers based payasyouuse cost model theoretically cheaper renting rackspaceservers data center theoretically history aws originally launched 2006 2 services s3 ec2 2010 services expanded include simpledb elastic block store relational database service dynamodb cloudwatch simple workflow cloudfront availability zones others amazon competitions big prizes spur adoption aws early days theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnect

--- Chunk 260 ---
 apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnectivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2

--- Chunk 261 ---
 zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon em

--- Chunk 262 ---
 aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon emr elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon rds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 

--- Chunk 263 ---
ds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 264 ---
ds 4300 aws introduction mark fontenot phd northeastern university amazon web services leading cloud platform 200 different services available globally available via massive networks regions availability zones massive data centers based payasyouuse cost model theoretically cheaper renting rackspaceservers data center theoretically history aws originally launched 2006 2 services s3 ec2 2010 services expanded include simpledb elastic block store relational database service dynamodb cloudwatch simple workflow cloudfront availability zones others amazon competitions big prizes spur adoption aws early days theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnect

--- Chunk 265 ---
 theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnectivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability

--- Chunk 266 ---
ivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable

--- Chunk 267 ---
 zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon em

--- Chunk 268 ---
 different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon emr elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon r

--- Chunk 269 ---
r elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon rds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 270 ---
ds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 271 ---
ds 4300 aws introduction mark fontenot phd northeastern university amazon web services leading cloud platform 200 different services available globally available via massive networks regions availability zones massive data centers based payasyouuse cost model theoretically cheaper renting rackspaceservers data center theoretically history aws originally launched 2006 2 services s3 ec2 2010 services expanded include simpledb elastic block store relational database service dynamodb cloudwatch simple workflow cloudfront availability zones others amazon competitions big prizes spur adoption aws early days theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnectivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon em

--- Chunk 272 ---
r elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon rds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 273 ---
ds 4300 aws introduction mark fontenot phd northeastern university amazon web services leading cloud platform 200 different services available globally available via massive networks regions availability zones massive data centers based payasyouuse cost model theoretically cheaper renting rackspaceservers data center theoretically history aws originally launched 2006 2 services s3 ec2 2010 services expanded include simpledb elastic block store relational database service dynamodb cloudwatch simple workflow cloudfront availability zones others amazon competitions big prizes spur adoption aws early days theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnectivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon em

--- Chunk 274 ---
 aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon emr elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon rds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 275 ---
ds 4300 aws introduction mark fontenot phd northeastern university amazon web services leading cloud platform 200 different services available globally available via massive networks regions availability zones massive data centers based payasyouuse cost model theoretically cheaper renting rackspaceservers data center theoretically history aws originally launched 2006 2 services s3 ec2 2010 services expanded include simpledb elastic block store relational database service dynamodb cloudwatch simple workflow cloudfront availability zones others amazon competitions big prizes spur adoption aws early days theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnectivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon em

--- Chunk 276 ---
 different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon emr elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon rds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 277 ---
ds 4300 aws introduction mark fontenot phd northeastern university amazon web services leading cloud platform 200 different services available globally available via massive networks regions availability zones massive data centers based payasyouuse cost model theoretically cheaper renting rackspaceservers data center theoretically history aws originally launched 2006 2 services s3 ec2 2010 services expanded include simpledb elastic block store relational database service dynamodb cloudwatch simple workflow cloudfront availability zones others amazon competitions big prizes spur adoption aws early days theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnectivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon emr elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon rds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 278 ---
ds 4300 aws introduction mark fontenot phd northeastern university amazon web services leading cloud platform 200 different services available globally available via massive networks regions availability zones massive data centers based payasyouuse cost model theoretically cheaper renting rackspaceservers data center theoretically history aws originally launched 2006 2 services s3 ec2 2010 services expanded include simpledb elastic block store relational database service dynamodb cloudwatch simple workflow cloudfront availability zones others amazon competitions big prizes spur adoption aws early days theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnectivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon emr elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon rds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 279 ---
ds 4300 aws introduction mark fontenot phd northeastern university amazon web services leading cloud platform 200 different services available globally available via massive networks regions availability zones massive data centers based payasyouuse cost model theoretically cheaper renting rackspaceservers data center theoretically history aws originally launched 2006 2 services s3 ec2 2010 services expanded include simpledb elastic block store relational database service dynamodb cloudwatch simple workflow cloudfront availability zones others amazon competitions big prizes spur adoption aws early days theyve continuously innovated always introducing new services ops dev analytics etc 200 services aws service categories cloud models iaas infrastructure service contains basic services needed build infrastructure paas platform service remove need manage infrastructure get right deploying app saas software service provide full software apps run managed another partyvendor cloud models httpsbluexpnetappcomiaas shared responsibility model aws aws responsibilities security cloud security physical infrastructure infra network keep data centers secure control access maintain power availability hvac etc monitor maintain physical networking equipment global infraconnectivity hypervisor host oss manage virtualization layer used aws compute services maintaining underlying host oss services maintaining managed services keep infra date functional maintain server software patching etc shared responsibility model client client responsibilities security cloud control datacontent client controls data classified encrypted shared implement enforce appropriate datahandling policies access management iam properly configure iam users roles policies enforce principle least privilege manage selfhosted apps associated oss ensure network security vpc handle compliance governance policies procedures aws global infrastructure regions distinct geographical areas useast1 uswest 1 etc availability zones azs region multiple azs roughly equiv isolated data centers edge locations locations cdn types caching services allows content closer end user httpsawsamazoncomaboutawsglobalinfrastructure compute services httpsawsamazoncomproductscompute vmbased ec2 ec2 spot elastic cloud compute containerbased ecs elastic container service ecr elastic container registry eks elastic kubernetes service fargate serverless container service serverless aws lambda storage services httpsawsamazoncomproductsstorage amazon s3 simple storage service object storage buckets highly scalable different storage classes amazon efs elastic file system simple serverless elastic setandforget file system amazon ebs elastic block storage highperformance block storage service amazon file cache highspeed cache datasets stored anywhere aws backup fully managed policybased service automate data protection compliance apps aws database services relational amazon rds amazon aurora keyvalue amazon dynamodb inmemory amazon memorydb amazon elasticache document amazon documentdb compat mongodb graph amazon neptune analytics services amazon athena analyze petabyte scale data lives s3 example amazon emr elastic mapreduce access apache spark hive presto etc aws glue discover prepare integrate data amazon redshift data warehousing service amazon kinesis realtime data streaming amazon quicksight cloudnative bireporting tool ml ai services amazon sagemaker fullymanaged ml platform including jupyter nbs build train deploy ml models aws ai services w pretrained models amazon comprehend nlp amazon rekognition imagevideo analysis amazon textract text extraction amazon translate machine translation important services data analyticsengineering ec2 lambda amazon s3 amazon rds dynamodb aws glue amazon athena amazon emr amazon redshift aws free tier allows gain handson experience subset services 12 months service limitations apply well amazon ec2 750 hoursmonth specific oss instance sizes amazon s3 5gb 20k gets 2k puts amazon rds 750 hoursmonth db use within certain limits many free services

--- Chunk 280 ---
ds 4300 amazon ec2 lambda mark fontenot phd northeastern university based part material gareth eagars data engineering aws packt publishing ec2 ec2 ec2 elastic cloud compute scalable virtual computing cloud many many instance types available payasyougo model pricing multiple different operating systems features ec2 elasticity easily programmatically scale instances needed use one standard amis provide ami preconfig needed easily integrates many services s3 rds etc ami amazon machine image ec2 lifecycle launch starting instance first time chosen configuration startstop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2

--- Chunk 281 ---
 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas

--- Chunk 282 ---
 provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 283 ---
ds 4300 amazon ec2 lambda mark fontenot phd northeastern university based part material gareth eagars data engineering aws packt publishing ec2 ec2 ec2 elastic cloud compute scalable virtual computing cloud many many instance types available payasyougo model pricing multiple different operating systems features ec2 elasticity easily programmatically scale instances needed use one standard amis provide ami preconfig needed easily integrates many services s3 rds etc ami amazon machine image ec2 lifecycle launch starting instance first time chosen configuration startstop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2

--- Chunk 284 ---
 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def

--- Chunk 285 ---
 sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 286 ---
 scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 287 ---
ds 4300 amazon ec2 lambda mark fontenot phd northeastern university based part material gareth eagars data engineering aws packt publishing ec2 ec2 ec2 elastic cloud compute scalable virtual computing cloud many many instance types available payasyougo model pricing multiple different operating systems features ec2 elasticity easily programmatically scale instances needed use one standard amis provide ami preconfig needed easily integrates many services s3 rds etc ami amazon machine image ec2 lifecycle launch starting instance first time chosen configuration startstop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2

--- Chunk 288 ---
stop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make

--- Chunk 289 ---
 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas

--- Chunk 290 ---
 sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 291 ---
 provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 292 ---
ds 4300 amazon ec2 lambda mark fontenot phd northeastern university based part material gareth eagars data engineering aws packt publishing ec2 ec2 ec2 elastic cloud compute scalable virtual computing cloud many many instance types available payasyougo model pricing multiple different operating systems features ec2 elasticity easily programmatically scale instances needed use one standard amis provide ami preconfig needed easily integrates many services s3 rds etc ami amazon machine image ec2 lifecycle launch starting instance first time chosen configuration startstop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 293 ---
ds 4300 amazon ec2 lambda mark fontenot phd northeastern university based part material gareth eagars data engineering aws packt publishing ec2 ec2 ec2 elastic cloud compute scalable virtual computing cloud many many instance types available payasyougo model pricing multiple different operating systems features ec2 elasticity easily programmatically scale instances needed use one standard amis provide ami preconfig needed easily integrates many services s3 rds etc ami amazon machine image ec2 lifecycle launch starting instance first time chosen configuration startstop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 294 ---
 scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 295 ---
ds 4300 amazon ec2 lambda mark fontenot phd northeastern university based part material gareth eagars data engineering aws packt publishing ec2 ec2 ec2 elastic cloud compute scalable virtual computing cloud many many instance types available payasyougo model pricing multiple different operating systems features ec2 elasticity easily programmatically scale instances needed use one standard amis provide ami preconfig needed easily integrates many services s3 rds etc ami amazon machine image ec2 lifecycle launch starting instance first time chosen configuration startstop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 296 ---
 provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 297 ---
ds 4300 amazon ec2 lambda mark fontenot phd northeastern university based part material gareth eagars data engineering aws packt publishing ec2 ec2 ec2 elastic cloud compute scalable virtual computing cloud many many instance types available payasyougo model pricing multiple different operating systems features ec2 elasticity easily programmatically scale instances needed use one standard amis provide ami preconfig needed easily integrates many services s3 rds etc ami amazon machine image ec2 lifecycle launch starting instance first time chosen configuration startstop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 298 ---
ds 4300 amazon ec2 lambda mark fontenot phd northeastern university based part material gareth eagars data engineering aws packt publishing ec2 ec2 ec2 elastic cloud compute scalable virtual computing cloud many many instance types available payasyougo model pricing multiple different operating systems features ec2 elasticity easily programmatically scale instances needed use one standard amis provide ami preconfig needed easily integrates many services s3 rds etc ami amazon machine image ec2 lifecycle launch starting instance first time chosen configuration startstop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 299 ---
ds 4300 amazon ec2 lambda mark fontenot phd northeastern university based part material gareth eagars data engineering aws packt publishing ec2 ec2 ec2 elastic cloud compute scalable virtual computing cloud many many instance types available payasyougo model pricing multiple different operating systems features ec2 elasticity easily programmatically scale instances needed use one standard amis provide ami preconfig needed easily integrates many services s3 rds etc ami amazon machine image ec2 lifecycle launch starting instance first time chosen configuration startstop temporarily suspend usage without deleting instance terminate permanently delete instance reboot restart instance without sling data root volume store data instance store temporary highspeed storage tied instance lifecycle efs elastic file system support shared file storage ebs elastic block storage persistent blocklevel storage s3 large data set storage ec2 backups even common ec2 use cases web hosting run websiteweb server associated apps data processing vm anything data possible programming language machine learning train models using gpu instances disaster recovery backup critical workloads infrastructure cloud lets spin ec2 instance lets spin ec2 instance lets spin ec2 instance ubuntu vm commands initial user ubuntu access super user commands sudo package manager apt kind like homebrew choco update packages installed sudo apt update sudo apt upgrade miniconda ec2 make sure youre logged ec2 instance lets install miniconda curl httpsrepoanacondacomminicondaminiconda3latestlinuxx86_64sh bash miniconda3latestlinuxx86_64sh installing using streamlit log ec2 instance log back make sure pip available pip version install streamlit sklearn pip install streamlit scikitlearn make directory small web app mkdir web cd web basic streamlit app nano testpy add code left ctrlx save exit streamlit run testpy import streamlit st def main sttitlewelcome streamlit app stwrite data sets stwrite data set 01 data set 02 data set 03 stwriten stwrite goodbye __name__ __main__ main opening streamlit port browser aws lambda lambdas lambdas provide serverless computing automatically run code response events relieves manage servers worry code pay execution time idle compute time different ec2 lambda features eventdriven execution triggered many different events aws supports large number runtimes python java nodejs etc highly integrated aws services extremely scalable rapidly adjust demands works addupload code aws mgmt console configure event sources watch lambda run one event sources fires event lets make one making lambda creating function sample code edit code deploy code test

--- Chunk 300 ---
31925 459 pm avltreerotationspng 30595956 httpsmarkfontenotnetwpcontentuploads202409avltreerotationspng 11

--- Chunk 301 ---
31925 459 pm avltreerotationspng 30595956 httpsmarkfontenotnetwpcontentuploads202409avltreerotationspng 11

--- Chunk 302 ---
31925 459 pm avltreerotationspng 30595956 httpsmarkfontenotnetwpcontentuploads202409avltreerotationspng 11

--- Chunk 303 ---
31925 459 pm avltreerotationspng 30595956 httpsmarkfontenotnetwpcontentuploads202409avltreerotationspng 11

--- Chunk 304 ---
31925 459 pm avltreerotationspng 30595956 httpsmarkfontenotnetwpcontentuploads202409avltreerotationspng 11

--- Chunk 305 ---
31925 459 pm avltreerotationspng 30595956 httpsmarkfontenotnetwpcontentuploads202409avltreerotationspng 11

--- Chunk 306 ---
31925 459 pm avltreerotationspng 30595956 httpsmarkfontenotnetwpcontentuploads202409avltreerotationspng 11

--- Chunk 307 ---
31925 459 pm avltreerotationspng 30595956 httpsmarkfontenotnetwpcontentuploads202409avltreerotationspng 11

--- Chunk 308 ---
31925 459 pm avltreerotationspng 30595956 httpsmarkfontenotnetwpcontentuploads202409avltreerotationspng 11

--- Chunk 309 ---
chapter 12 binary search trees binary search tree binary tree special property called bstproperty given follows nodes x belongs left subtree x key less key x belongs right subtree x key greater key x assume keys bst pairwise distinct node following attributes p left right pointers parent left child right child respectively key key stored node 1 example 4 2 3 6 5 12 9 8 11 15 19 20 7 2 traversal nodes bst traversal mean visiting nodes graph traversal strategies speciﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx

--- Chunk 310 ---
 write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly

--- Chunk 311 ---
 smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k key

--- Chunk 312 ---
z using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 

--- Chunk 313 ---
9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 

--- Chunk 314 ---
1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made

--- Chunk 315 ---
 run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 

--- Chunk 316 ---
4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 317 ---
chapter 12 binary search trees binary search tree binary tree special property called bstproperty given follows nodes x belongs left subtree x key less key x belongs right subtree x key greater key x assume keys bst pairwise distinct node following attributes p left right pointers parent left child right child respectively key key stored node 1 example 4 2 3 6 5 12 9 8 11 15 19 20 7 2 traversal nodes bst traversal mean visiting nodes graph traversal strategies speciﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx

--- Chunk 318 ---
 right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20

--- Chunk 319 ---
 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search

--- Chunk 320 ---
 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k keyz using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7

--- Chunk 321 ---
z using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 

--- Chunk 322 ---
7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 

--- Chunk 323 ---
13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm

--- Chunk 324 ---
 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n

--- Chunk 325 ---
 run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 

--- Chunk 326 ---
 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 327 ---
2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 328 ---
chapter 12 binary search trees binary search tree binary tree special property called bstproperty given follows nodes x belongs left subtree x key less key x belongs right subtree x key greater key x assume keys bst pairwise distinct node following attributes p left right pointers parent left child right child respectively key key stored node 1 example 4 2 3 6 5 12 9 8 11 15 19 20 7 2 traversal nodes bst traversal mean visiting nodes graph traversal strategies speciﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx

--- Chunk 329 ---
iﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives

--- Chunk 330 ---
 write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly

--- Chunk 331 ---
 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search

--- Chunk 332 ---
 smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k key

--- Chunk 333 ---
 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k keyz using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given

--- Chunk 334 ---
z using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 

--- Chunk 335 ---
 node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 

--- Chunk 336 ---
9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 

--- Chunk 337 ---
13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm

--- Chunk 338 ---
1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made

--- Chunk 339 ---
 contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n

--- Chunk 340 ---
 run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 

--- Chunk 341 ---
 number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 

--- Chunk 342 ---
4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 343 ---
2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 344 ---
chapter 12 binary search trees binary search tree binary tree special property called bstproperty given follows nodes x belongs left subtree x key less key x belongs right subtree x key greater key x assume keys bst pairwise distinct node following attributes p left right pointers parent left child right child respectively key key stored node 1 example 4 2 3 6 5 12 9 8 11 15 19 20 7 2 traversal nodes bst traversal mean visiting nodes graph traversal strategies speciﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search

--- Chunk 345 ---
 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k keyz using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 

--- Chunk 346 ---
1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 

--- Chunk 347 ---
2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 348 ---
chapter 12 binary search trees binary search tree binary tree special property called bstproperty given follows nodes x belongs left subtree x key less key x belongs right subtree x key greater key x assume keys bst pairwise distinct node following attributes p left right pointers parent left child right child respectively key key stored node 1 example 4 2 3 6 5 12 9 8 11 15 19 20 7 2 traversal nodes bst traversal mean visiting nodes graph traversal strategies speciﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search

--- Chunk 349 ---
 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k keyz using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 

--- Chunk 350 ---
13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 

--- Chunk 351 ---
 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 352 ---
chapter 12 binary search trees binary search tree binary tree special property called bstproperty given follows nodes x belongs left subtree x key less key x belongs right subtree x key greater key x assume keys bst pairwise distinct node following attributes p left right pointers parent left child right child respectively key key stored node 1 example 4 2 3 6 5 12 9 8 11 15 19 20 7 2 traversal nodes bst traversal mean visiting nodes graph traversal strategies speciﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search

--- Chunk 353 ---
 smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k keyz using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 

--- Chunk 354 ---
9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n

--- Chunk 355 ---
 run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 356 ---
chapter 12 binary search trees binary search tree binary tree special property called bstproperty given follows nodes x belongs left subtree x key less key x belongs right subtree x key greater key x assume keys bst pairwise distinct node following attributes p left right pointers parent left child right child respectively key key stored node 1 example 4 2 3 6 5 12 9 8 11 15 19 20 7 2 traversal nodes bst traversal mean visiting nodes graph traversal strategies speciﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k keyz using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 

--- Chunk 357 ---
1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 358 ---
chapter 12 binary search trees binary search tree binary tree special property called bstproperty given follows nodes x belongs left subtree x key less key x belongs right subtree x key greater key x assume keys bst pairwise distinct node following attributes p left right pointers parent left child right child respectively key key stored node 1 example 4 2 3 6 5 12 9 8 11 15 19 20 7 2 traversal nodes bst traversal mean visiting nodes graph traversal strategies speciﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k keyz using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 

--- Chunk 359 ---
11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 360 ---
chapter 12 binary search trees binary search tree binary tree special property called bstproperty given follows nodes x belongs left subtree x key less key x belongs right subtree x key greater key x assume keys bst pairwise distinct node following attributes p left right pointers parent left child right child respectively key key stored node 1 example 4 2 3 6 5 12 9 8 11 15 19 20 7 2 traversal nodes bst traversal mean visiting nodes graph traversal strategies speciﬁed ordering three objects visit current node left subtree right subtree assume left subtree always comes right subtree three strategies 1 inorder ordering left subtree current node right subtree 2 preorder ordering current node left subtree right subtree 3 postorder ordering left subtree right subtree current node 3 inorder traversal pseudocode recursive algorithm takes input pointer tree executed inorder traversal tree traversal prints key node visited inorderwalkx 1 x nil return 2 inorderwalkleftx 3 print keyx 4 inorderwalkrightx write similar pseudocode preorder postorder 4 preorder postorder inorder 2 1 3 1 1 2 2 3 3 4 2 3 6 5 12 9 8 11 15 19 20 7 outcome inorder traversal bst postorder traversal preorder traversal 5 inorder traversal gives 2 3 4 5 6 7 8 9 11 12 15 19 20 preorder traversal gives 7 4 2 3 6 5 12 9 8 11 19 15 20 postorder traversal gives 3 2 5 6 4 8 11 9 15 20 19 12 7 inorder travel bst ﬁnds keys nondecreasing order 6 operations bst 1 searching key assume key subtree key searched given input well take full advantage bstproperty suppose node node key searched search otherwise key current node either strictly smaller key searched strictly greater key searched former case bst property keys th left subtree strictly less key searched means need search left subtree thus examine right subtree latter case symmetry examine right subtree 7 algorithm k key searched x start node bstsearchx k 1 x 2 nil 3 keyy k return 4 else keyy k righty 5 else lefty 6 return found 8 example search 8 7 4 2 6 9 13 11 nil running time search 9 2 maximum minimum ﬁnd minimum identify leftmost node ie farthest node reach following left branches ﬁnd maximum identify rightmost node ie farthest node reach following right branches bstminimumx 1 x nil return empty tree 2 x 3 lefty nil lefty 4 return keyy bstmaximumx 1 x nil return empty tree 2 x 3 righty nil righty 4 return keyy 10 3 insertion suppose need insert node z k keyz using binary search ﬁnd nil replacing z break bstproperty 11 bstinsertx z k 1 x nil return error 2 x 3 true 4 keyy k 5 z lefty 6 else z righty 7 z nil break 8 9 keyy k lefty z 10 else rightpy z 12 4 successor predecessor successor respectively predecessor key k search tree smallest respectively largest key belongs tree strictly greater respectively less k idea ﬁnding successor given node x x right child successor minimum right subtree x otherwise successor parent farthest node reached x following right branches backward 13 example 4 2 3 6 5 12 9 8 11 15 19 20 7 25 23 14 algorithm bstsuccessorx 1 rightx nil 2 rightx 3 lefty nil lefty 4 return 5 else 6 x 7 rightpx x px 8 px nil return px 9 else return successor 15 predecessor found similarly roles left right exchanged roles maximum minimum exchanged node successor undeﬁned running time successor algorithm 16 5 deletion suppose want delete node z 1 z children replace z nil 2 z one child promote unique child zs place 3 z two children identify zs successor call successor either leaf right child promote zs place treat loss using one two solutions 17 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 

--- Chunk 361 ---
13 11 8 5 6 1 3 2 4 9 13 11 8 4 2 3 5 6 1 3 2 4 7 9 13 11 8 5 6 9 13 11 8 7 10 10 10 5 6 1 3 2 4 7 9 13 11 8 5 6 1 3 2 4 13 11 9 10 18 algorithm algorithm deletes z bst bstdeletet z 1 leftz nil rightz nil 2 z 3 else bstsuccessorz 4 node thats actually removed 5 two children 6 lefty nil 7 x lefty 8 else x righty 9 x node thats moving ys position 10 x nil px py 11 px reset x isnt nil 12 resetting unnecessary x nil 19 algorithm contd 13 py nil roott x 14 root x becomes root 15 otherwise following 16 else leftpy 17 leftpy x 18 left child parent 19 set parents left child x 20 else rightpy x 21 right child parent 22 set parents right child x 23 z 24 keyz keyy 25 move data z 27 return 20 summary eﬃciency analysis theorem binary search tree height h search minimum maximum successor predecessor insert delete made run oh time 21 randomly built bst suppose insert n distinct keys initially empty tree assuming n permutations equally likely occur average height tree study question consider process constructing tree inserting order randomly selected n distinct keys initially empty tree actually values keys matter matters position inserted key n keys 22 process construction view process follows key x keys selected uniformly random inserted tree keys inserted keys greater x go right subtree x keys smaller x go left subtree thus height tree thus constructed one plus larger height left subtree height right subtree 23 random variables n number keys xn height tree n keys yn 2xn want upper bound eyn n 2 eyn 1 n n x i1 2emaxyi1 yni emaxyi1 yni eyi1 yni eyi1 eyni collecting terms eyn 4 n n1 x i1 eyi 24 analysis claim n 1 eyn 1 4 n3 3 prove induction n base case ey1 20 1 induction step eyn 4 n n1 x i1 eyi using fact n1 x i0 3 3 n 3 4 eyn 4 n 1 4 n 3 4 eyn 1 4 n 3 3 25 jensens inequality function f convex x x λ 0 λ 1 fλx 1 λy λfx 1 λfy jensens inequality states random variables x convex function f fex efx let x xn fx 2x efx eyn 2exn 1 4 n 3 3 righthand side n 33 taking log sides exn olog n thus average height randomly build bst olog n 26

--- Chunk 362 ---
ics 46 spring 2022 news course reference schedule project guide notes examples reinforcement exercises grade calculator alex ics 46 spring 2022 notes examples avl trees must care binary search tree balancing weve seen previously performance characteristics binary search trees vary rather wildly theyre mainly dependent shape tree height tree key determining factor definition binary search trees restrict keys allowed present nodes smaller keys left subtrees larger keys right subtrees specify restriction trees shape meaning perfectly legal binary search trees containing keys 1 2 3 4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway

--- Chunk 363 ---
 looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n

--- Chunk 364 ---
 gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee

--- Chunk 365 ---
 binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary

--- Chunk 366 ---
 search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925

--- Chunk 367 ---
 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals we

--- Chunk 368 ---
ve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree

--- Chunk 369 ---
 periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point

--- Chunk 370 ---
 used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key

--- Chunk 371 ---
 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 

--- Chunk 372 ---
35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes

--- Chunk 373 ---
 answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 

--- Chunk 374 ---
1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes

--- Chunk 375 ---
 mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 376 ---
ics 46 spring 2022 news course reference schedule project guide notes examples reinforcement exercises grade calculator alex ics 46 spring 2022 notes examples avl trees must care binary search tree balancing weve seen previously performance characteristics binary search trees vary rather wildly theyre mainly dependent shape tree height tree key determining factor definition binary search trees restrict keys allowed present nodes smaller keys left subtrees larger keys right subtrees specify restriction trees shape meaning perfectly legal binary search trees containing keys 1 2 3 4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway

--- Chunk 377 ---
 two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent

--- Chunk 378 ---
 trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 319

--- Chunk 379 ---
 importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h

--- Chunk 380 ---
 binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary

--- Chunk 381 ---
 one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm

--- Chunk 382 ---
 linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit

--- Chunk 383 ---
 takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals weve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights

--- Chunk 384 ---
ve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree

--- Chunk 385 ---
 looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2

--- Chunk 386 ---
31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 

--- Chunk 387 ---
 three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node

--- Chunk 388 ---
 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 

--- Chunk 389 ---
 correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions

--- Chunk 390 ---
 example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes

--- Chunk 391 ---
 despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove

--- Chunk 392 ---
1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes

--- Chunk 393 ---
2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 

--- Chunk 394 ---
 height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 395 ---
ics 46 spring 2022 news course reference schedule project guide notes examples reinforcement exercises grade calculator alex ics 46 spring 2022 notes examples avl trees must care binary search tree balancing weve seen previously performance characteristics binary search trees vary rather wildly theyre mainly dependent shape tree height tree key determining factor definition binary search trees restrict keys allowed present nodes smaller keys left subtrees larger keys right subtrees specify restriction trees shape meaning perfectly legal binary search trees containing keys 1 2 3 4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway

--- Chunk 396 ---
4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential

--- Chunk 397 ---
 looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n

--- Chunk 398 ---
 trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 319

--- Chunk 399 ---
 gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee

--- Chunk 400 ---
25 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2

--- Chunk 401 ---
 binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary

--- Chunk 402 ---
 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least

--- Chunk 403 ---
 search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925

--- Chunk 404 ---
 linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit

--- Chunk 405 ---
 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals we

--- Chunk 406 ---
 coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals weve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree

--- Chunk 407 ---
ve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree

--- Chunk 408 ---
 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 

--- Chunk 409 ---
 periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point

--- Chunk 410 ---
31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 

--- Chunk 411 ---
 used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key

--- Chunk 412 ---
452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted

--- Chunk 413 ---
 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 

--- Chunk 414 ---
 node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c

--- Chunk 415 ---
35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes

--- Chunk 416 ---
 example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes

--- Chunk 417 ---
 answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 

--- Chunk 418 ---
 youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine

--- Chunk 419 ---
1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes

--- Chunk 420 ---
 lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see

--- Chunk 421 ---
 mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 422 ---
 height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 423 ---
ics 46 spring 2022 news course reference schedule project guide notes examples reinforcement exercises grade calculator alex ics 46 spring 2022 notes examples avl trees must care binary search tree balancing weve seen previously performance characteristics binary search trees vary rather wildly theyre mainly dependent shape tree height tree key determining factor definition binary search trees restrict keys allowed present nodes smaller keys left subtrees larger keys right subtrees specify restriction trees shape meaning perfectly legal binary search trees containing keys 1 2 3 4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 319

--- Chunk 424 ---
25 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925

--- Chunk 425 ---
 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals weve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 

--- Chunk 426 ---
31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 

--- Chunk 427 ---
35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine

--- Chunk 428 ---
 lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 429 ---
ics 46 spring 2022 news course reference schedule project guide notes examples reinforcement exercises grade calculator alex ics 46 spring 2022 notes examples avl trees must care binary search tree balancing weve seen previously performance characteristics binary search trees vary rather wildly theyre mainly dependent shape tree height tree key determining factor definition binary search trees restrict keys allowed present nodes smaller keys left subtrees larger keys right subtrees specify restriction trees shape meaning perfectly legal binary search trees containing keys 1 2 3 4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 319

--- Chunk 430 ---
 importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm

--- Chunk 431 ---
 linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals weve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree

--- Chunk 432 ---
 looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node

--- Chunk 433 ---
 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes

--- Chunk 434 ---
 despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 

--- Chunk 435 ---
 height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 436 ---
ics 46 spring 2022 news course reference schedule project guide notes examples reinforcement exercises grade calculator alex ics 46 spring 2022 notes examples avl trees must care binary search tree balancing weve seen previously performance characteristics binary search trees vary rather wildly theyre mainly dependent shape tree height tree key determining factor definition binary search trees restrict keys allowed present nodes smaller keys left subtrees larger keys right subtrees specify restriction trees shape meaning perfectly legal binary search trees containing keys 1 2 3 4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 319

--- Chunk 437 ---
 gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least

--- Chunk 438 ---
 search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals weve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree

--- Chunk 439 ---
ve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 

--- Chunk 440 ---
 used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c

--- Chunk 441 ---
35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine

--- Chunk 442 ---
1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 443 ---
ics 46 spring 2022 news course reference schedule project guide notes examples reinforcement exercises grade calculator alex ics 46 spring 2022 notes examples avl trees must care binary search tree balancing weve seen previously performance characteristics binary search trees vary rather wildly theyre mainly dependent shape tree height tree key determining factor definition binary search trees restrict keys allowed present nodes smaller keys left subtrees larger keys right subtrees specify restriction trees shape meaning perfectly legal binary search trees containing keys 1 2 3 4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925

--- Chunk 444 ---
 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals weve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 

--- Chunk 445 ---
35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 446 ---
ics 46 spring 2022 news course reference schedule project guide notes examples reinforcement exercises grade calculator alex ics 46 spring 2022 notes examples avl trees must care binary search tree balancing weve seen previously performance characteristics binary search trees vary rather wildly theyre mainly dependent shape tree height tree key determining factor definition binary search trees restrict keys allowed present nodes smaller keys left subtrees larger keys right subtrees specify restriction trees shape meaning perfectly legal binary search trees containing keys 1 2 3 4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925

--- Chunk 447 ---
 much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals weve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl

--- Chunk 448 ---
 node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 449 ---
ics 46 spring 2022 news course reference schedule project guide notes examples reinforcement exercises grade calculator alex ics 46 spring 2022 notes examples avl trees must care binary search tree balancing weve seen previously performance characteristics binary search trees vary rather wildly theyre mainly dependent shape tree height tree key determining factor definition binary search trees restrict keys allowed present nodes smaller keys left subtrees larger keys right subtrees specify restriction trees shape meaning perfectly legal binary search trees containing keys 1 2 3 4 5 6 7 yet legal one better height first tree called perfect binary tree smaller height second called degenerate tree two shapes represent two extremes best worst possible shapes binary search tree containing seven keys course small number keys like shape number keys grows distinction two tree shapes becomes increasingly vital whats degenerate shape isnt even necessarily rare edge case get start empty tree add keys already order surprisingly common scenario realworld programs example one obvious algorithm generating unique integer keys care theyre unique generate sequentially whats bad degenerate tree anyway looking picture degenerate tree intuition already telling something amiss particular tilt head 45 degrees right look like linked lists perception accident behave like except theyre complicated boot analytical perspective three results give us pause every time perform lookup degenerate binary search tree take time possible youll reach every node tree youre done n grows heavy burden bear implement lookup recursively might also using memory might end many n frames runtime stack one every recursive call ways mitigate example kinds carefullywritten recursion programming languages including c avoid runtime stack growth recurse still sign potential trouble time take build degenerate tree also prohibitive start empty binary search tree add keys order long take first key add go directly root could think taking single step creating node second key add require look root node take one step right could think taking two steps subsequent key add require one step one total number steps would take add n keys would determined sum 1 2 3 n sum well see several times throughout course equal nn 1 2 total number steps build entire tree would θn2 overall n gets large tree would hideously expensive build every subsequent search would painful well general situation need sure avoid else probably consider data structure binary search tree worst case simply much burden bear n might get large find way control trees shape carefully force remain balanced well fine question course importantly whether keeping cost low enough doesnt outweigh benefit aiming perfection best goal us shoot would maintain perfection words every time insert key binary search tree would ideally still perfect binary tree case wed know height tree would always θlog n commensurate effect performance 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 17 however consider goal problem emerges almost immediately following perfect binary trees definition perfect binary trees pictured 1 3 7 15 nodes respectively possible perfect shapes binary trees number nodes problem though lies fact valid perfect binary tree 2 nodes 4 5 6 8 9 10 11 12 13 14 nodes generally impossible us guarantee binary search tree always perfect definition theres simply way represent numbers keys first things first well need relax definition perfection accommodate every possible number keys might want store complete binary trees somewhat relaxed notion perfection something called complete binary tree defined follows complete binary tree height h binary tree h 0 left right subtrees empty h 0 one two things true left subtree perfect binary tree height h 1 right subtree complete binary tree height h 1 left subtree complete binary tree height h 1 right subtree perfect binary tree height h 2 bit mindbending definition actually leads conceptually simple result every level complete binary tree every node could possibly present except last level might missing nodes missing nodes nodes far left possible following complete binary trees furthermore possible complete binary trees numbers nodes arrangement say 6 keys besides one shown would violate definition weve seen height perfect binary tree θlog n stretch see height complete binary tree θlog n well well accept via intuition proceed complete binary tree would great goal us attain could keep shape binary search trees complete would always binary search trees height θlog n cost maintaining completeness trouble course need algorithm maintaining completeness go trouble trying figure one consider whether even worth time deduce cost maintaining completeness even havent figured algorithm yet one example demonstrates big problem suppose binary search tree left complete definition wanted insert key 1 would need algorithm would transform tree left tree right tree right certainly complete would outcome wed want consider would take every key tree move matter algorithm used would still move every key n keys tree would take ωn time moving n keys takes least linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925

--- Chunk 450 ---
 linear time even best possible algorithm moving work still get done worst case maintaining completeness single insertion requires ωn time unfortunately time ought spending maintaining balance means well need come compromise often case learn design algorithms willingness tolerate imperfect result thats still good enough uses often lead algorithm much faster one achieves perfect result would good enough result good balance condition overall goal lookups insertions removals binary search tree require olog n time every case rather letting degrade worstcase behavior need decide balance condition say need understand shape considered well 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 27 enough balanced purposes even perfect good balance condition two properties height binary search tree meeting condition θlog n takes olog n time rebalance tree insertions removals words guarantees height tree still logarithmic give us logarithmictime lookups time spent rebalancing wont exceed logarithmic time would otherwise spend insertion removal tree logarithmic height cost wont outweigh benefit coming balance condition like tall task stand shoulders giants came us definition helping guide us toward understanding whether weve found looking compromise avl trees wellknown approaches maintaining binary search trees state nearbalance meets notion good balance condition one called avl tree well explore others outside scope course include redblack trees meet definition good splay trees dont always meet definition good meet amortized basis well stick one solution problem avl trees avl trees might called nearly balanced binary search trees certainly arent perfectlybalanced possible nonetheless achieve goals weve decided maintaining logarithmic height logarithmic cost makes binary search tree nearly balanced enough considered avl tree core concept embodied something called avl property say node binary search tree avl property heights left right subtrees differ 1 words tolerate certain amount imbalance heights subtrees slightly different hopes efficiently maintain since going comparing heights subtrees theres one piece background need consider recall height tree length longest path definition height tree root node empty subtrees would zero tree thats totally empty maintain clear pattern relative tree heights well say height empty tree 1 means node say childless left child right child would still considered balanced leads us finally definition avl tree avl tree binary search tree nodes avl property binary trees two avl two thing keep mind avl matter squinting tree deciding whether looks balanced theres precise definition two trees dont meet definition fail meet least one node marked diagrams dashed square doesnt avl property avl trees definition required meet balance condition every operation every time insert remove key every node tree avl property meet requirement need restructure tree periodically essentially detecting correcting imbalance whenever wherever happens need rearrange tree ways improve shape without losing essential ordering property binary search tree smaller keys toward left larger ones toward right rotations rebalancing avl trees achieved using called rotations used proper times efficiently improve shape tree altering handful pointers kinds rotations first understand work focus attention use first kind rotation called rotation takes tree left turns tree right circle b written single node containing single key triangles t1 t2 t3 written arbitrary subtrees may empty may contain number nodes binary search trees 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 37 important remember trees binary search trees rotation doesnt harm ordering keys nodes subtrees t1 t2 t3 maintain appropriate positions relative keys b keys t1 smaller keys t2 larger smaller b keys t3 larger b performing rotation would simple matter adjusting pointers notably constant number pointers matter many nodes tree means rotation would run θ1 time bs parent would point used point b right child would b instead root t2 bs left child would root t2 instead second kind rotation rr rotation makes similar adjustment note rr rotation mirror image rotation third kind rotation lr rotation makes adjustment thats slightly complicated lr rotation requires five pointer updates instead three still constant number changes runs θ1 time finally rl rotation mirror image lr rotation understand mechanics rotations work one step closer understanding avl trees rotations arent arbitrary theyre used specifically correct imbalances detected insertions removals insertion algorithm 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 47 inserting key avl tree starts way insertion binary search tree perform lookup find key already tree youre done keys binary search tree must unique lookup terminates without key found add new node appropriate leaf position lookup ended problem adding new node introduced possibility imbalance example suppose started avl tree inserted key 35 binary search tree insertion would give us result resulting tree avl tree node containing key 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted

--- Chunk 451 ---
 40 avl property difference heights subtrees 2 left subtree height 1 right subtree empty height 1 answer lies following algorithm perform normal insertion process work way back tree position added node could quite simple insertion done recursively compare heights left right subtrees node differ 1 choose rotation fix imbalance note comparing heights left right subtrees would quite expensive didnt already know solution problem node store height ie height subtree rooted cheaply updated every insertion removal unwind recursion rotation chosen considering two links along path node imbalance heading back toward inserted node wondering names rr lr rl come answer mystery two links left perform rotation rooted imbalance two links right perform rr rotation rooted imbalance first link left second right perform lr rotation rooted imbalance first link right second left perform rl rotation rooted imbalance shown one rotations rr lr rl correct imbalance brought inserting key case wed perform lr rotation first two links leading 40 toward 35 left right rooted 40 would correct imbalance tree would rearranged look like compare diagram describing lr rotation node containing 40 c node containing 30 node containing 35 b empty left subtree node containing 30 t1 empty left subtree node containing 35 t2 empty right subtree node containing 35 t3 empty right subtree node containing 40 t4 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 57 rotation see wed expect node b example contained 35 root newlyrotated subtree node example contained 30 left child root newlyrotated subtree node c example contained 40 right child root newlyrotated subtree four subtrees t1 t2 t3 t4 empty still empty note tree balanced rotation accident single rotation rr lr rl thats necessary correct imbalance introduced insertion algorithm removal algorithm removals somewhat similar insertions sense would start usual binary search tree removal algorithm find correct imbalances recursion unwinds key difference removals require one rotation correct imbalances still require rotations path back root removal occurred generally olog n rotations asymptotic analysis key question height avl tree n nodes answer θlog n certain lookups insertions removals take olog n time sure lookups would olog n theyre binary search tree doesnt avl property height tree θlog n lookups run olog n time insertions removals despite slightly complicated avl tree work traversing single path tree potentially way leaf position way back length longest path thats height tree θlog n know none paths longer insertions removals take olog n time left key question height avl tree n nodes youre curious feel free assume want know keep reading height avl tree n nodes optional answer revolves around noting many nodes minimum could binary search tree height n still avl tree turns avl trees height n 2 minimum number nodes share similar property avl tree height h 2 minimum number nodes consists root node two subtrees one avl tree height h 1 minimum number nodes avl tree height h 2 minimum number nodes given observation write recurrence describes number nodes minimum avl tree height h m0 1 height 0 minimum number nodes 1 root node children m1 2 height 1 minimum number nodes 2 root node one child mh 1 mh 1 mh 2 repeated substitution technique learned previously isnt good way try solve particular recurrence prove something interesting quite easily know sure avl trees larger heights bigger minimum number nodes avl trees smaller heights thats fairly selfexplanatory means sure 1 mh 1 mh 2 given conclude following mh 2mh 2 use repeated substitution technique determine lower bound recurrence mh 2mh 2 22mh 4 4mh 4 42mh 6 8mh 6 2jmh 2j could prove induction j well accept faith let j h2 2h2mh h 2h2m0 mh 2h2 weve shown minimum number nodes present avl tree height h least 2h2 reality actually gives us something useful work use result figure really interested opposite height avl tree n nodes mh 2h2 log2mh h2 2 log2mh h finally see avl trees height h minimum number nodes height 2 log2n n number nodes tree avl trees minimum number nodes relationship number nodes height even better though 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 67 reasons weve seen previously know relationship number nodes height binary tree never better logarithmic ultimately see height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

--- Chunk 452 ---
 height avl tree n nodes θlog n reality turns bound lower 2 log2n something akin 144 log2n even avl trees minimum number nodes though proof involved doesnt change asymptotic result 31925 452 pm ics 46 spring 2022 notes examples avl trees httpsicsucieduthorntonics46notesavltrees 77

